import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics import jaccard_similarity_score
import heapq
import pandas
from sklearn.neighbors import NearestNeighbors
import configfile


# KNN function

def NearestNeighbour(k,X_train2,X_test2):

	test_ad_nbrs = pd.DataFrame()
	nbrs = NearestNeighbors(n_neighbors=k, algorithm='ball_tree').fit(X_train2.iloc[:,2:])

	for i in range(0,len(X_test2.iloc[:,2:])):

		#finding the neighbours
		distances, indices = nbrs.kneighbors(X_test2.iloc[i,2:].values.reshape(1,-1))
		#distances, indices = nbrs.radius_neighbors(X_test2.iloc[i, 2:].values.reshape(1, -1),3)
		indices = indices[-1]

		nbr_acc = pd.DataFrame(X_train2.iloc[indices,0:2].reset_index())
		nbr_acc.loc[:,'id2'] = X_test2['id_accs'][i]
		nbr_acc.loc[:, 'deal2'] = X_test2['case_safe_ud__c'][i]
		nbr_acc = nbr_acc.iloc[:,1:]
		nbr_acc.columns = ['nbr_acc', 'nbr_deal','id_accs','case_safe_ud__c']

		#merging the neighbours to the AD
		test_ad_nbrs = test_ad_nbrs.append(nbr_acc, ignore_index = True)
	return(test_ad_nbrs)
#==============================================================================
#==============================================================================

#==============================================================================
# Function to get N Recommendations
#==============================================================================

def Nrecommender(plist,n,sold,unsold,unsoldlst):
	
	#subset the sold dataset
	sold1 = sold[sold['id'].isin(plist)].reset_index(drop = True)
	soldlst = [tuple(l) for l in list(sold1.iloc[:,1:].values)]
	
	#Loop to get the distance of all unsold with the sold list
	d = [sum([jaccard_similarity_score(x, y,sample_weight= configfile.jw) for x in soldlst]) for y in unsoldlst]
	#print(d)

	#Pick top N property id with respect to sum of distance
	rec_index = heapq.nlargest(n, range(len(d)), key=d.__getitem__)
	#rec_dist = heapq.nlargest(n, d)
	print(rec_index)
	rec_id = list(unsold['id'][rec_index])
	return rec_id

# distance between two ids

def simscore(p_act,p_rec,unsold):


	unsold1 = unsold.iloc[:, 1:]
	act = unsold1.loc[unsold.loc[:,'id'] == p_act].values[0]
	rec = unsold1.loc[unsold.loc[:,'id'] == p_rec].values[0]
	#print(act)
	#print(rec)
	score = jaccard_similarity_score(tuple(act), tuple(rec),sample_weight= configfile.jw)
	return(score)
